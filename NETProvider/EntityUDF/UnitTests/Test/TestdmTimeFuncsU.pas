unit TestdmTimeFuncsU;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, IBX.IBCustomDataSet, IBX.IBDatabase, System.SysUtils,
  IBX.IBUpdateSQL, dmTimeFuncsU, IBX.IBSQL, IBX.IBTable, IBX.IBStoredProc, IBX.IBQuery,
  IBX.IBScript, dmDataConvU, Data.DB, System.Classes;

type
  // Test methods for class TdmTimefuncs

  TTimeFuncs = class(TTestCase)
  strict private
    FdmTimefuncs: TdmTimefuncs;
  public
    procedure SetUp; override;
    procedure TearDown; override;
    procedure HasErrors;
  published
    procedure TestUTCCurrentTime;
    procedure TestAddYear;
    procedure TestAddMonth;
    procedure TestAddWeek;
    procedure TestAddDay;
    procedure TestAddHour;
    procedure TestAddMinute;
    procedure TestAddSecond;
    procedure TestDiffYear;
    procedure TestDiffMonth;
    procedure TestDiffWeek;
    procedure TestDiffDay;
    procedure TestDiffHour;
    procedure TestDiffMinute;
    procedure TestDiffSecond;
  end;

implementation

procedure TTimeFuncs.HasErrors;
begin
  if FdmTimefuncs.Comparer.Errors.Count > 0 then
    raise Exception.Create(FdmTimefuncs.Comparer.Errors.Text);
  if FdmTimefuncs.Comparer.Warnings.Count > 0 then
    Check(False, FdmTimefuncs.Comparer.Warnings.Text);
end;

procedure TTimeFuncs.SetUp;
begin
  FdmTimefuncs := TdmTimefuncs.Create(nil);
end;

procedure TTimeFuncs.TearDown;
begin
  FdmTimefuncs.Free;
  FdmTimefuncs := nil;
end;

procedure TTimeFuncs.TestUTCCurrentTime;
begin
  FdmTimefuncs.UTCCurrentTime;
  HasErrors;
  // TODO: Validate method results
end;

procedure TTimeFuncs.TestAddYear;
begin
  FdmTimefuncs.AddYear;
  HasErrors;
  // TODO: Validate method results
end;

procedure TTimeFuncs.TestAddMonth;
begin
  FdmTimefuncs.AddMonth;
  HasErrors;
  // TODO: Validate method results
end;

procedure TTimeFuncs.TestAddWeek;
begin
  FdmTimefuncs.AddWeek;
  HasErrors;
  // TODO: Validate method results
end;

procedure TTimeFuncs.TestAddDay;
begin
  FdmTimefuncs.AddDay;
  HasErrors;
  // TODO: Validate method results
end;

procedure TTimeFuncs.TestAddHour;
begin
  FdmTimefuncs.AddHour;
  HasErrors;
  // TODO: Validate method results
end;

procedure TTimeFuncs.TestAddMinute;
begin
  FdmTimefuncs.AddMinute;
  HasErrors;
  // TODO: Validate method results
end;

procedure TTimeFuncs.TestAddSecond;
begin
  FdmTimefuncs.AddSecond;
  HasErrors;
  // TODO: Validate method results
end;

procedure TTimeFuncs.TestDiffYear;
begin
  FdmTimefuncs.DiffYear;
  HasErrors;
  // TODO: Validate method results
end;

procedure TTimeFuncs.TestDiffMonth;
begin
  FdmTimefuncs.DiffMonth;
  HasErrors;
  // TODO: Validate method results
end;

procedure TTimeFuncs.TestDiffWeek;
begin
  FdmTimefuncs.DiffWeek;
  HasErrors;
  // TODO: Validate method results
end;

procedure TTimeFuncs.TestDiffDay;
begin
  FdmTimefuncs.DiffDay;
  HasErrors;
  // TODO: Validate method results
end;

procedure TTimeFuncs.TestDiffHour;
begin
  FdmTimefuncs.DiffHour;
  HasErrors;
  // TODO: Validate method results
end;

procedure TTimeFuncs.TestDiffMinute;
begin
  FdmTimefuncs.DiffMinute;
  HasErrors;
  // TODO: Validate method results
end;

procedure TTimeFuncs.TestDiffSecond;
begin
  FdmTimefuncs.DiffSecond;
  HasErrors;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TTimeFuncs.Suite);
end.

