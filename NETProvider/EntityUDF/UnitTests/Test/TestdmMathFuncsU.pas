unit TestdmMathFuncsU;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, IBX.IBCustomDataSet, dmMathFuncsU, IBX.IBDatabase, System.SysUtils,
  IBX.IBUpdateSQL, IBX.IBSQL, IBX.IBTable, IBX.IBStoredProc, IBX.IBQuery, IBX.IBScript,
  dmDataConvU, Data.DB, System.Classes;

type
  // Test methods for class TdmMathFuncs

  MathFuncs = class(TTestCase)
  strict private
    FdmMathFuncs: TdmMathFuncs;
  public
    procedure SetUp; override;
    procedure TearDown; override;
    procedure HasErrors;
  published
    procedure TestAbs;
    procedure TestCeiling;
    procedure TestFloor;
    procedure TestPower;
    procedure TestBitAnd;
    procedure TestBitOr;
    procedure TestBitXor;
    procedure TestBitNot;
    procedure TestRound;
    procedure TestTruncate;
    procedure TestMod;
    procedure TestBINSHL;
    procedure TestBINSHR;
  end;

implementation

procedure MathFuncs.HasErrors;
begin
  if FdmMathFuncs.Comparer.Errors.Count > 0 then
    raise Exception.Create(FdmMathFuncs.Comparer.Errors.Text);
  if FdmMathFuncs.Comparer.Warnings.Count > 0 then
    Check(False, FdmMathFuncs.Comparer.Warnings.Text);
end;

procedure MathFuncs.SetUp;
begin
  FdmMathFuncs := TdmMathFuncs.Create(nil);
end;

procedure MathFuncs.TearDown;
begin
  FdmMathFuncs.Free;
  FdmMathFuncs := nil;
end;

procedure MathFuncs.TestAbs;
begin
  FdmMathFuncs.Abs;
  // TODO: Validate method results
  HasErrors;
end;

procedure MathFuncs.TestCeiling;
begin
  FdmMathFuncs.Ceiling;
  // TODO: Validate method results
  HasErrors;
end;

procedure MathFuncs.TestFloor;
begin
  FdmMathFuncs.Floor;
  // TODO: Validate method results
  HasErrors;
end;

procedure MathFuncs.TestMod;
begin
  FdmMathFuncs.fn_mod;
  // TODO: Validate method results
  HasErrors;
end;

procedure MathFuncs.TestPower;
begin
  FdmMathFuncs.Power;
  // TODO: Validate method results
  HasErrors;
end;

procedure MathFuncs.TestBINSHL;
begin
  FdmMathFuncs.BINSHL;
  // TODO: Validate method results
  HasErrors;
end;

procedure MathFuncs.TestBINSHR;
begin
  FdmMathFuncs.BINSHR;
  // TODO: Validate method results
  HasErrors;
end;

procedure MathFuncs.TestBitAnd;
begin
  FdmMathFuncs.BitAnd;
  // TODO: Validate method results
  HasErrors;
end;

procedure MathFuncs.TestBitOr;
begin
  FdmMathFuncs.BitOr;
  // TODO: Validate method results
  HasErrors;
end;

procedure MathFuncs.TestBitXor;
begin
  FdmMathFuncs.BitXor;
  // TODO: Validate method results
  HasErrors;
end;

procedure MathFuncs.TestBitNot;
begin
  FdmMathFuncs.BitNot;
  // TODO: Validate method results
  HasErrors;
end;

procedure MathFuncs.TestRound;
begin
  FdmMathFuncs.Round;
  // TODO: Validate method results
  HasErrors;
end;

procedure MathFuncs.TestTruncate;
begin
  FdmMathFuncs.Truncate;
  // TODO: Validate method results
  HasErrors;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(MathFuncs.Suite);
end.

